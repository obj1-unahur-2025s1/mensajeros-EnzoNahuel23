import example.*

describe "Pruebas de envio" {

  test "Que roberto (90kg) puede llevar un paquete que está pago en un camión que tiene un acoplado" {
    camion.acoplado(1)
    roberto.vehiculo(camion)
    roberto.pesoFisico(90)
    envio.estaPago(true)
    envio.mensajero(roberto)
    assert.that(envio.puedeEnviarse(puenteDeBrooklyn) || envio.puedeEnviarse(laMatrix))
  }

  test "Que neo con crédito no puede llevar un paquete que no está pago a la matrix" {
    neo.tieneCredito(true)
    envio.mensajero(neo)
    envio.estaPago(false)
    assert.that(not (envio.puedeEnviarse(laMatrix)))
  }
  test"Agregar mensajero" {
    empresa.contratar(roberto)
    assert.equals([neo, chuck, roberto], empresa.mensajeros())
  }
  test "despedir empleado" {
    empresa.despedir(neo)
    assert.equals([chuck], empresa.mensajeros())
  } 
  test "vaciar empresa" {
    empresa.despedirTodos()
    assert.equals([], empresa.mensajeros())
  }
  test "la empresa es grande"{
    empresa.contratar(roberto)
    assert.that(empresa.mensajeriaEsGrande())
  }
  test "Consultar si el paquete puede ser entregado por el primer empleado de la la empresa de mensajería" {
    empresa.contratar(roberto)
    assert.that(empresa.paquetePuedeEntregarsePorElPrimero(puenteDeBrooklyn))
  }

  test "Saber el peso del último mensajero de la empresa."{
    empresa.contratar(roberto)
    assert.equals(95, empresa.mensajeros().last().peso())
  }
}